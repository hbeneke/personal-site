#!/bin/bash

# Check if version bump should be skipped
if [ "$SKIP_VERSION_BUMP" = "1" ]; then
    echo "âœ“ Skipping version bump (SKIP_VERSION_BUMP flag set)"
    exit 0
fi

BRANCH=$(git rev-parse --abbrev-ref HEAD)
MERGED_BRANCH=$(git reflog -1 | grep -o "merge .*:" | cut -d' ' -f2 | cut -d':' -f1)

if [ "$BRANCH" = "master" ] && [ "$MERGED_BRANCH" = "develop" ]; then
    if [ -f "package.json" ]; then
        CHANGED_FILES=$(git diff-tree -r --name-only --no-commit-id ORIG_HEAD HEAD)
        
        NON_MD_FILES=$(echo "$CHANGED_FILES" | grep -v '\.md$')
        
        if [ -z "$NON_MD_FILES" ]; then
            echo "Only markdown files were changed. Skipping version bump."
            exit 0
        fi
        
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        
        # Check if VERSION_BUMP_TYPE is set, default to 'minor'
        BUMP_TYPE="${VERSION_BUMP_TYPE:-minor}"
        
        MAJOR=$(echo $CURRENT_VERSION | cut -d'.' -f1)
        MINOR=$(echo $CURRENT_VERSION | cut -d'.' -f2)
        PATCH=$(echo $CURRENT_VERSION | cut -d'.' -f3)
        
        if [ "$BUMP_TYPE" = "patch" ]; then
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        else
            # Default to minor bump
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.0"
        fi
        
        npm version $NEW_VERSION --no-git-tag-version
        
        git add package.json package-lock.json
        git commit -m "chore: bump version to $NEW_VERSION"
        
        # Generate changelog from previous tag to current HEAD
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
            # %s gives only the subject (first line) of the commit message
            CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
        else
            # %s gives only the subject (first line) of the commit message
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # Create tag with changelog
        TAG_MESSAGE="Release version $NEW_VERSION

Changelog:
$CHANGELOG"
        
        git tag -a "v$NEW_VERSION" -m "$TAG_MESSAGE"
        
        echo "Version bumped from $CURRENT_VERSION to $NEW_VERSION"
        echo "Tag v$NEW_VERSION created with changelog:"
        echo "$CHANGELOG"
        
        # Sync version back to develop branch
        echo "Syncing version to develop branch..."
        git checkout develop
        npm version $NEW_VERSION --no-git-tag-version
        git add package.json package-lock.json
        git commit -m "chore: sync version to $NEW_VERSION from master"
        
        echo "Version also synced to develop branch"
        echo ""
        echo "   IMPORTANT: Remember to push both branches and tags:"
        echo "   git push origin master"
        echo "   git push origin develop"
        echo "   git push origin v$NEW_VERSION"
        echo ""
        
        # Return to master (your workflow will handle the rest)
        git checkout master
    fi
fi
