---
import { render } from "astro:content";
import ScrollToTop from "@components/scroll-to-top.astro";
import TableOfContents from "@components/table-of-contents.astro";
import EtiquetteIcon from "@icons/etiquette.svg?raw";
import BaseLayout from "@layouts/base-layout.astro";
import { siteConfig } from "@site-config";
import { getAllPosts } from "@utils/post";

export async function getStaticPaths() {
  const posts = await getAllPosts(false, false);

  return posts.map((post) => ({
    params: { slug: post.data.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { title, publishDate, description, tags, readTime, updatedDate } =
  post.data;
const { Content, headings } = await render(post);
const formattedDate: string = new Date(publishDate).toLocaleString(
  siteConfig.locale,
  {
    dateStyle: "long",
  }
);
---

<BaseLayout
  title={`${title} Â· ${siteConfig.siteTitle}`}
  description={description}
>
  <header class="mb-8" data-pagefind-ignore>
    <a
      href="/posts"
      class="inline-flex items-center hover:underline mb-4 hover:text-gray-200 transition-colors duration-200"
    >
      &larr; Back to Posts
    </a>
  </header>

  <article class="prose prose-invert max-w-none">
    <header class="mb-8 not-prose">
      <h1 class="text-2xl font-bold secondary mb-1" data-pagefind-meta="title">
        {title}
      </h1>
      <div class="flex items-center gap-4 mb-4" data-pagefind-ignore>
        <time
          datetime={publishDate}
          class="text-xs text-gray-400"
          data-pagefind-meta="date"
        >
          {formattedDate}{readTime ? ` - ${readTime} min read` : ""}
        </time>
        {
          updatedDate && (
            <span class="text-xs text-[var(--pale-green-oklch)] bg-quote/5 px-2 py-1 rounded">
              Updated:{" "}
              <time datetime={updatedDate} title={updatedDate}>
                {new Date(updatedDate).toLocaleString(siteConfig.locale, {
                  dateStyle: "long",
                })}
              </time>
            </span>
          )
        }
      </div>
      {
        tags && tags.length > 0 && (
          <div class="flex flex-wrap mb-6" data-pagefind-meta="tags">
            <div class="inline-flex items-center h-6 w-6 pb-2 mr-2 text-gray-300">
              <Fragment set:html={EtiquetteIcon} />
            </div>
            {tags.map((tag: string, index: number) => (
              <>
                <a
                  href={`/tags/${tag}/`}
                  class="text-xs text-gray-300 underline hover:text-gray-100 transition-colors"
                  data-pagefind-filter="tag"
                >
                  #{tag}
                </a>
                {index < tags.length - 1 && (
                  <span class="text-xs text-gray-300 mr-1">,</span>
                )}
              </>
            ))}
          </div>
        )
      }
    </header>

    <div class="prose-content text-sm relative" data-pagefind-body>
      <Content />
      <TableOfContents headings={headings} />
    </div>
  </article>
  <ScrollToTop />
</BaseLayout>
