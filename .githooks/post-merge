#!/bin/bash

BRANCH=$(git rev-parse --abbrev-ref HEAD)
MERGED_BRANCH=$(git reflog -1 | grep -o "merge .*:" | cut -d' ' -f2 | cut -d':' -f1)

if [ "$BRANCH" = "master" ] && [ "$MERGED_BRANCH" = "develop" ]; then
    if [ -f "package.json" ]; then
        CHANGED_FILES=$(git diff-tree -r --name-only --no-commit-id ORIG_HEAD HEAD)
        
        NON_MD_FILES=$(echo "$CHANGED_FILES" | grep -v '\.md$')
        
        if [ -z "$NON_MD_FILES" ]; then
            echo "Only markdown files were changed. Skipping version bump."
            exit 0
        fi
        
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        
        MAJOR=$(echo $CURRENT_VERSION | cut -d'.' -f1)
        MINOR=$(echo $CURRENT_VERSION | cut -d'.' -f2)
        
        NEW_MINOR=$((MINOR + 1))
        NEW_VERSION="$MAJOR.$NEW_MINOR.0"
        
        npm version $NEW_VERSION --no-git-tag-version
        
        git add package.json package-lock.json
        git commit -m "chore: bump version to $NEW_VERSION"
        
        git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
        
        echo "Version bumped from $CURRENT_VERSION to $NEW_VERSION"
        echo "Tag v$NEW_VERSION created"
        
        # Sync version back to develop branch
        git checkout develop
        npm version $NEW_VERSION --no-git-tag-version
        git add package.json package-lock.json
        git commit -m "chore: sync version to $NEW_VERSION from master"
        git checkout master
        
        echo "Version also synced to develop branch"
    fi
fi
